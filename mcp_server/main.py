# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:02:52+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity, HTTPBasic

from models import (
    AccountHolderBalanceRequest,
    AccountHolderBalanceResponse,
    AccountHolderTransactionListRequest,
    AccountHolderTransactionListResponse,
    DebitAccountHolderRequest,
    DebitAccountHolderResponse,
    PayoutAccountHolderRequest,
    PayoutAccountHolderResponse,
    RefundFundsTransferRequest,
    RefundFundsTransferResponse,
    RefundNotPaidOutTransfersRequest,
    RefundNotPaidOutTransfersResponse,
    ServiceError,
    SetupBeneficiaryRequest,
    SetupBeneficiaryResponse,
    TransferFundsRequest,
    TransferFundsResponse,
)

app = MCPProxy(
    contact={
        'email': 'developer-experience@adyen.com',
        'name': 'Adyen Developer Experience team',
        'url': 'https://www.adyen.help/hc/en-us/community/topics',
        'x-twitter': 'Adyen',
    },
    description='This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.\n\nThe Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.\n\nFor more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/).\n## Authentication\nYour Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:\n\n ```\ncurl\n-H "Content-Type: application/json" \\\n-H "X-API-Key: YOUR_API_KEY" \\\n...\n```\n\nAlternatively, you can use the username and password to connect to the API using basic authentication. For example:\n\n```\ncurl\n-U "ws@MarketPlace.YOUR_PLATFORM_ACCOUNT":"YOUR_WS_PASSWORD" \\\n-H "Content-Type: application/json" \\\n...\n```\nWhen going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).\n\n## Versioning\nThe Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance\n```',
    termsOfService='https://www.adyen.com/legal/terms-and-conditions',
    title='Fund API',
    version='6',
    servers=[{'url': 'https://cal-test.adyen.com/cal/services/Fund/v6'}],
)


@app.post(
    '/accountHolderBalance',
    description=""" Returns the account balances of an account holder. An account's balances are organized according by currencies. This mean that an account may have multiple balances: one for each currency. """,
    tags=['account_holder_balance_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_account_holder_balance(body: AccountHolderBalanceRequest = None):
    """
    Get the balances of an account holder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accountHolderTransactionList',
    description=""" Returns a list of transactions for an account holder's accounts. You can specify the accounts and transaction statuses to be included on the list. The call returns a maximum of 50 transactions for each account. To retrieve all transactions, you must make another call with the 'page' value incremented. Transactions are listed in chronological order, with the most recent transaction first. """,
    tags=['account_holder_transaction_records'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_account_holder_transaction_list(
    body: AccountHolderTransactionListRequest = None,
):
    """
    Get a list of transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/debitAccountHolder',
    description=""" Sends a direct debit request to an account holder's bank account. If the direct debit is successful, the funds are settled in the accounts specified in the split instructions. Adyen sends the result of the direct debit in a [`DIRECT_DEBIT_INITIATED`](https://docs.adyen.com/api-explorer/#/NotificationService/latest/post/DIRECT_DEBIT_INITIATED) notification webhook.

 To learn more about direct debits, see [Top up accounts](https://docs.adyen.com/marketplaces-and-platforms/classic/top-up-accounts). """,
    tags=['account_holder_debit_transactions', 'account_holder_payment_processing'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_debit_account_holder(body: DebitAccountHolderRequest = None):
    """
    Send a direct debit request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/payoutAccountHolder',
    description=""" Pays out a specified amount from an account to the bank account of account holder. """,
    tags=['account_holder_payment_processing', 'account_holder_balance_operations'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_payout_account_holder(body: PayoutAccountHolderRequest = None):
    """
    Pay out from an account to the account holder
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/refundFundsTransfer',
    description=""" Refunds funds transferred from one account to another. Both accounts must be in the same platform, but can have different account holders.  """,
    tags=['refund_transaction_management', 'funds_transfer_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_refund_funds_transfer(body: RefundFundsTransferRequest = None):
    """
    Refund a funds transfer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/refundNotPaidOutTransfers',
    description=""" Refunds all the transactions of an account that have taken place since the most recent payout. This request is on a account basis (as opposed to a payment basis), so only the portion of the payment that was made to the specified account is refunded. The commissions, fees, and payments to other accounts remain in the accounts to which they were sent as designated by the original payment's split details. """,
    tags=[
        'refund_transaction_management',
        'account_holder_balance_operations',
        'account_holder_transaction_records',
    ],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_refund_not_paid_out_transfers(body: RefundNotPaidOutTransfersRequest = None):
    """
    Refund all transactions of an account since the most recent payout
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setupBeneficiary',
    description=""" Defines a benefactor and a beneficiary relationship between two accounts. At the time of benefactor/beneficiary setup, the funds in the benefactor account are transferred to the beneficiary account, and any further payments to the benefactor account are automatically sent to the beneficiary account. A series of benefactor/beneficiaries may not exceed four beneficiaries and may not have a cycle in it. """,
    tags=['beneficiary_account_management', 'funds_transfer_management'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_setup_beneficiary(body: SetupBeneficiaryRequest = None):
    """
    Designate a beneficiary account and transfer the benefactor's current balance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/transferFunds',
    description=""" Transfers funds from one account to another account. Both accounts must be in the same platform, but can have different account holders. The transfer must include a transfer code, which should be determined by the platform, in compliance with local regulations. """,
    tags=['funds_transfer_management', 'account_holder_transaction_records'],
    security=[
        HTTPBasic(name="None"),
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_transfer_funds(body: TransferFundsRequest = None):
    """
    Transfer funds between platform accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
